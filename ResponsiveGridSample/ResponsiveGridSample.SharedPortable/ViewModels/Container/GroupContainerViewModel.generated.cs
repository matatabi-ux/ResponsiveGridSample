//<auto-generated />
#region License
//-----------------------------------------------------------------------
// <copyright>
//     Copyright matatabi-ux 2014.
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace ResponsiveGridSample.ViewModels
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;
    using System.Threading.Tasks;

    /// <summary>
    /// グループコンテナ ViewModel のインタフェース
    /// </summary>
    public partial interface IGroupContainerViewModel
    {
        string UniqueId { get; set; }
        string ContentId { get; set; }
        ViewModelBase Content { get; set; }
        string Header { get; set; }
        ObservableCollection<ItemContainerViewModel> Items { get; set; }
        bool IsActive { get; set; }
    }

    /// <summary>
    /// グループコンテナ ViewModel
    /// </summary>
    public partial class GroupContainerViewModel : ViewModelBase, IGroupContainerViewModel
    {
        #region UniqueId:ID プロパティ
        /// <summary>
        /// ID
        /// </summary>
        private string uniqueId; 

        /// <summary>
        /// ID の変更前の処理
        /// </summary>
        partial void OnUniqueIdChanging(ref string value);

        /// <summary>
        /// ID の変更後の処理
        /// </summary>
        partial void OnUniqueIdChanged();

        /// <summary>
        /// ID の取得および設定
        /// </summary>
        [RestorableData]
        public string UniqueId
        {
            get
            {
                return this.uniqueId;
            }

            set
            {
                if (this.uniqueId != value)
                {
                    this.OnUniqueIdChanging(ref value);
                    this.SetProperty<string>(ref this.uniqueId, value);
                    this.OnUniqueIdChanged();
                }
            }
        }
        #endregion //UniqueId:ID プロパティ

        #region ContentId:コンテンツ ID プロパティ
        /// <summary>
        /// コンテンツ ID
        /// </summary>
        private string contentId; 

        /// <summary>
        /// コンテンツ ID の変更前の処理
        /// </summary>
        partial void OnContentIdChanging(ref string value);

        /// <summary>
        /// コンテンツ ID の変更後の処理
        /// </summary>
        partial void OnContentIdChanged();

        /// <summary>
        /// コンテンツ ID の取得および設定
        /// </summary>
        [RestorableData]
        public string ContentId
        {
            get
            {
                return this.contentId;
            }

            set
            {
                if (this.contentId != value)
                {
                    this.OnContentIdChanging(ref value);
                    this.SetProperty<string>(ref this.contentId, value);
                    this.OnContentIdChanged();
                }
            }
        }
        #endregion //ContentId:コンテンツ ID プロパティ

        #region Content:コンテンツ ViewModel プロパティ
        /// <summary>
        /// コンテンツ ViewModel
        /// </summary>
        private ViewModelBase content; 

        /// <summary>
        /// コンテンツ ViewModel の変更前の処理
        /// </summary>
        partial void OnContentChanging(ref ViewModelBase value);

        /// <summary>
        /// コンテンツ ViewModel の変更後の処理
        /// </summary>
        partial void OnContentChanged();

        /// <summary>
        /// コンテンツ ViewModel の取得および設定
        /// </summary>
        [RestorableData]
        public ViewModelBase Content
        {
            get
            {
                return this.content;
            }

            set
            {
                if (this.content != value)
                {
                    this.OnContentChanging(ref value);
                    this.SetProperty<ViewModelBase>(ref this.content, value);
                    this.OnContentChanged();
                }
            }
        }
        #endregion //Content:コンテンツ ViewModel プロパティ

        #region Header:ヘッダ プロパティ
        /// <summary>
        /// ヘッダ
        /// </summary>
        private string header; 

        /// <summary>
        /// ヘッダ の変更前の処理
        /// </summary>
        partial void OnHeaderChanging(ref string value);

        /// <summary>
        /// ヘッダ の変更後の処理
        /// </summary>
        partial void OnHeaderChanged();

        /// <summary>
        /// ヘッダ の取得および設定
        /// </summary>
        [RestorableData]
        public string Header
        {
            get
            {
                return this.header;
            }

            set
            {
                if (this.header != value)
                {
                    this.OnHeaderChanging(ref value);
                    this.SetProperty<string>(ref this.header, value);
                    this.OnHeaderChanged();
                }
            }
        }
        #endregion //Header:ヘッダ プロパティ

        #region Items:アイテム情報 ViewModel プロパティ
        /// <summary>
        /// アイテム情報 ViewModel
        /// </summary>
        private ObservableCollection<ItemContainerViewModel> items; 

        /// <summary>
        /// アイテム情報 ViewModel の変更前の処理
        /// </summary>
        partial void OnItemsChanging(ref ObservableCollection<ItemContainerViewModel> value);

        /// <summary>
        /// アイテム情報 ViewModel の変更後の処理
        /// </summary>
        partial void OnItemsChanged();

        /// <summary>
        /// アイテム情報 ViewModel の取得および設定
        /// </summary>
        [RestorableData]
        public ObservableCollection<ItemContainerViewModel> Items
        {
            get
            {
                return this.items;
            }

            set
            {
                if (this.items != value)
                {
                    this.OnItemsChanging(ref value);
                    this.SetProperty<ObservableCollection<ItemContainerViewModel>>(ref this.items, value);
                    this.OnItemsChanged();
                }
            }
        }
        #endregion //Items:アイテム情報 ViewModel プロパティ

        #region IsActive:クリック可能フラグ プロパティ
        /// <summary>
        /// クリック可能フラグ
        /// </summary>
        private bool isActive; 

        /// <summary>
        /// クリック可能フラグ の変更前の処理
        /// </summary>
        partial void OnIsActiveChanging(ref bool value);

        /// <summary>
        /// クリック可能フラグ の変更後の処理
        /// </summary>
        partial void OnIsActiveChanged();

        /// <summary>
        /// クリック可能フラグ の取得および設定
        /// </summary>
        [RestorableData]
        public bool IsActive
        {
            get
            {
                return this.isActive;
            }

            set
            {
                if (this.isActive != value)
                {
                    this.OnIsActiveChanging(ref value);
                    this.SetProperty<bool>(ref this.isActive, value);
                    this.OnIsActiveChanged();
                }
            }
        }
        #endregion //IsActive:クリック可能フラグ プロパティ

    }

}